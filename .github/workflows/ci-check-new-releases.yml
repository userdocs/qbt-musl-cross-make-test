name: ci - check-new-release

on:
  workflow_call:
    inputs:
      bypass_update_check:
        type: string
        required: false
      bypass_git_commit:
        type: string
        required: false
      gnu_mirror_url:
        required: true
        type: string
    outputs:
      build_new_release:
        value: ${{ jobs.check_release.outputs.build_new_release }}

jobs:
  check_release:
    outputs:
      build_new_release: ${{ steps.boot_strap_release.outputs.build_new_release }}
    runs-on: ubuntu-24.04-arm
    env:
      GH_TOKEN: "${{ github.token}}"
      build_new_release: "false"
      bypass_update_check: ${{ inputs.bypass_update_check }}
      bypass_git_commit: ${{ inputs.bypass_git_commit }}
      gnu_mirror_url: ${{ inputs.gnu_mirror_url }}
      github_repository: ${{ github.repository }}
      github_workspace: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          persist-credentials: false

      - name: Install dependencies
        run: sudo apt-get install -y ssed

      - name: boot strap
        id: boot_strap_release
        run: |
          if curl -sLIf "https://github.com/${github_repository}/releases/latest/download/versions.json" &> /dev/null; then
              until curl -sLf "https://github.com/${github_repository}/releases/latest/download/versions.json" > remote_versions.json; do
                printf '%s\n' "waiting for URL."
                sleep 2
              done
          else
              cp -f versions.json remote_versions.json
              use_local_config_sub="yes"
          fi

          if curl -sLIo /dev/null --fail "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD"; then
              config_sub="$(git ls-remote "https://git.savannah.gnu.org/git/config.git" | head -n1 | awk '{ print substr($1,1,8) }')"
              printf '%s\n' "savannah.gnu.org is reachable, using git to get config.sub commit hash of remote version"
              mkdir -p ${github_workspace}/sources
              curl -sL "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD" -o sources/config.sub
          else
              config_sub="$(jq -r .CONFIG_SUB_REV versions.json)"
              printf '%s\n' "savannah.gnu.org is unreachable (again), using jq to get sources/config.sub commit hash of current version"
          fi

          # current version is determined by getting the versions.json from the latest release
          declare -A current_versions
          eval "$(jq -r 'to_entries[]|@sh"current_versions[\(.key)]=\(.value)"' remote_versions.json)"

          declare -A remote_versions
          remote_versions[CONFIG_SUB_REV]="${config_sub}"
          remote_versions[GCC_VER]="$(curl -sL "${gnu_mirror_url}/gcc/" | ssed -Rn 's|(.*)href="gcc-(.+?)/"(.*)|\2|p' | sort -V | tail -n1)"
          remote_versions[BINUTILS_VER]="$(curl -sL "${gnu_mirror_url}/binutils/" | ssed -Rn 's|(.*)href="binutils-([0-9]+\.[0-9]+)\.tar\.xz"(.*)|\2|p' | tail -n1)"
          remote_versions[MUSL_VER]="$(git ls-remote "https://git.musl-libc.org/git/musl" | head -n1 | awk '{ print substr($1,1,12) }')"
          remote_versions[GMP_VER]="$(curl -sL "${gnu_mirror_url}/gmp/" | ssed -Rn 's|(.*)href="gmp-(.+?)\.tar\.xz"(.*)|\2|p' | tail -n1)"
          remote_versions[MPC_VER]="$(curl -sL "${gnu_mirror_url}/mpc/" | ssed -Rn 's|(.*)href="mpc-(.+?)\.tar\.gz"(.*)|\2|p' | tail -n1)"
          remote_versions[MPFR_VER]="$(curl -sL "${gnu_mirror_url}/mpfr/" | ssed -Rn 's|(.*)href="mpfr-(.+?)\.tar\.gz"(.*)|\2|p' | tail -n1)"
          remote_versions[LINUX_VER]="$(curl -sL "https://mirrors.edge.kernel.org/pub/linux/kernel/v6.x/" | ssed -Rn 's|(.*)href="linux-(.+?)\.tar\.gz"(.*)|\2|p' | sort -rV | head -n1)"
          remote_versions[ISL_VER]="$(curl -sL https://sourceforge.net/projects/libisl/files | ssed -Rn 's|(.*)href="(.*)isl-(.+?)\.tar\.xz/download"(.*)|\3|p' | sort -V | tail -n1)"

          # Verify the array entries and exit on failure
          for key in "${!remote_versions[@]}"; do
            if [[ -z "${remote_versions[$key]}" ]]; then
              printf '%s\n' "Error: ${key} is empty"
              exit 1
            fi
          done

          declare -A remote_urls_dl
          remote_urls_dl[CONFIG_SUB_REV]="https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=${remote_versions[CONFIG_SUB_REV]}"
          remote_urls_dl[GCC_VER]="${gnu_mirror_url}/gcc/gcc-${remote_versions[GCC_VER]}/gcc-${remote_versions[GCC_VER]}.tar.xz"
          remote_urls_dl[BINUTILS_VER]="${gnu_mirror_url}/binutils/binutils-${remote_versions[BINUTILS_VER]}.tar.xz"
          remote_urls_dl[MUSL_VER]="https://git.musl-libc.org/cgit/musl/snapshot/musl-${remote_versions[MUSL_VER]}.tar.gz"
          remote_urls_dl[GMP_VER]="${gnu_mirror_url}/gmp/gmp-${remote_versions[GMP_VER]}.tar.xz"
          remote_urls_dl[MPC_VER]="${gnu_mirror_url}/mpc/mpc-${remote_versions[MPC_VER]}.tar.gz"
          remote_urls_dl[MPFR_VER]="${gnu_mirror_url}/mpfr/mpfr-${remote_versions[MPFR_VER]}.tar.xz"
          remote_urls_dl[LINUX_VER]="https://mirrors.edge.kernel.org/pub/linux/kernel/v6.x/linux-${remote_versions[LINUX_VER]}.tar.xz"
          remote_urls_dl[ISL_VER]="https://libisl.sourceforge.io/isl-${remote_versions[ISL_VER]}.tar.xz"

          ver() {
              local input="$1"
              if [[ "$input" =~ ^[0-9]+(\.[0-9]+)*$ ]]; then
                  local test_array
                  read -ra test_array < <(printf "%s" "${input//./ }")
                  printf "%d%03d%03d%03d" "${test_array[@]}"
              else
                  printf "%s" "$input"
              fi
          }

          for iray in "${!current_versions[@]}"; do
            if [[ "$(ver "${current_versions[$iray]}")" != "$(ver "${remote_versions[$iray]}")" ]]; then
              printf "%-14s current:%-15s remote:%-15s %s\n" "$iray" "${current_versions[$iray]}" "${remote_versions[$iray]}" "< New version available - workflow will be triggered"

              if [[ "$iray" == "CONFIG_SUB_REV" ]]; then
                if [[ -z "${use_local_config_sub}" ]]; then
                  printf '%s' "$(curl -sL "${remote_urls_dl[$iray]}" | sha1sum | sed 's/-/config.sub/')" > "hashes/config.sub.${remote_versions[CONFIG_SUB_REV]}.sha1"
                fi
              else
                # get updated shasum of $iray
                curl -sL "${remote_urls_dl[$iray]}" -o "${remote_urls_dl[$iray]##*/}"
                sha1sum "${remote_urls_dl[$iray]##*/}" > "hashes/${remote_urls_dl[$iray]##*/}.sha1"
                rm -f "${remote_urls_dl[$iray]##*/}"
              fi

              # Extract package name more robustly
              patch_dir_prefix="${iray%_VER}"
              patch_dir_prefix="${patch_dir_prefix,,}" # Convert to lowercase

              current_patch_dir="patches/${patch_dir_prefix}-${current_versions[$iray]}"
              new_patch_dir="patches/${patch_dir_prefix}-${remote_versions[$iray]}"

              ###### copy patches ############################################################
              if [[ -d "${current_patch_dir}" ]]; then
                printf '\n%s\n\n' "${current_patch_dir} exists"
                printf '%s\n\n' "Does the ${patch_dir_prefix}-${current_versions[$iray]} directory has any patches?" >> $GITHUB_STEP_SUMMARY
                if (
                  shopt -s nullglob dotglob
                  f=("${current_patch_dir}"/*.diff)
                  ((${#f[@]}))
                ); then
                  printf '%s\n\n' "It does ... copying them to ${new_patch_dir}" >> $GITHUB_STEP_SUMMARY
                  # Create directory and copy patches
                  mkdir -p "${new_patch_dir}"
                  cp -rf "${current_patch_dir}"/* "${new_patch_dir}/"
                else
                  printf '\n%s\n\n' '${patch_dir_prefix}-${current_versions[$iray]} directory is empty' >> $GITHUB_STEP_SUMMARY
                fi
              else
                printf '\n%s\n\n' "${current_patch_dir} does not exist" >> $GITHUB_STEP_SUMMARY
                printf '%s\n\n' "no patches to copy over to new version" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done

          ###### copy patches ############################################################

          printf '%b\n' "# build_new_release?" >> $GITHUB_STEP_SUMMARY
          printf '\n%s\n\n' "build_new_release=${build_new_release}" >> $GITHUB_STEP_SUMMARY

          cat > "versions.json" <<- VERSIONS_JSON
          {
            "CONFIG_SUB_REV": "${remote_versions[CONFIG_SUB_REV]}",
            "GCC_VER": "${remote_versions[GCC_VER]}",
            "BINUTILS_VER": "${remote_versions[BINUTILS_VER]}",
            "MUSL_VER": "${remote_versions[MUSL_VER]}",
            "GMP_VER": "${remote_versions[GMP_VER]}",
            "MPC_VER": "${remote_versions[MPC_VER]}",
            "MPFR_VER": "${remote_versions[MPFR_VER]}",
            "LINUX_VER": "${remote_versions[LINUX_VER]}",
            "ISL_VER": "${remote_versions[ISL_VER]}"
          }
          VERSIONS_JSON

          printf '\n%s\n\n' "# existing versions.mak" >> $GITHUB_STEP_SUMMARY
          printf '\n%b\n' "\`\`\`make" >> $GITHUB_STEP_SUMMARY
          cat versions.mak >> $GITHUB_STEP_SUMMARY
          printf '\n%b\n' "\`\`\`" >> $GITHUB_STEP_SUMMARY

          cat > "versions.mak" <<- VERSIONS_MAK
          CONFIG_SUB_REV = ${remote_versions[CONFIG_SUB_REV]}
          GCC_VER = ${remote_versions[GCC_VER]}
          BINUTILS_VER = ${remote_versions[BINUTILS_VER]}
          MUSL_VER = ${remote_versions[MUSL_VER]}
          GMP_VER = ${remote_versions[GMP_VER]}
          MPC_VER = ${remote_versions[MPC_VER]}
          MPFR_VER = ${remote_versions[MPFR_VER]}
          LINUX_VER = ${remote_versions[LINUX_VER]}
          ISL_VER = ${remote_versions[ISL_VER]}
          VERSIONS_MAK

          printf '\n%s\n\n' "# updated versions.mak" >> $GITHUB_STEP_SUMMARY
          printf '\n%b\n' "\`\`\`make\n$(cat versions.mak)\n\`\`\`\n" >> $GITHUB_STEP_SUMMARY

          printf '%b\n' "# Remote versions outputs summary" >> $GITHUB_STEP_SUMMARY
          printf '\n%b\n' "\`\`\`make" >> $GITHUB_STEP_SUMMARY
          for iray in "${!current_versions[@]}"; do
            printf '%b\n' "$iray: ${remote_versions[$iray]}" >> $GITHUB_STEP_SUMMARY
          done
          printf '\n%b\n' "\`\`\`" >> $GITHUB_STEP_SUMMARY

          if [[ ${bypass_update_check} == 'true' ]] ; then
            printf '%s\n' "build_new_release=true" >> $GITHUB_OUTPUT
          fi

          if [[ ${bypass_git_commit} == 'true' ]] ; then
            printf '\n%s\n\n' "Git changes will be: skipped" >> $GITHUB_STEP_SUMMARY
          else
            printf '\n%s\n\n' "Git changes will be: committed" >> $GITHUB_STEP_SUMMARY
          fi

      # This step only runs of if steps.boot_strap_release.outputs.build_new_release == 'true'
      # This will only be set if the versions.json value from the latest release is different to the remote version. Not the local version.mak
      # So if the bypass check is used the automatic change by the workflow won't be committed and the build will use the version.mak
      # Because the upstream version and the latest release version are the same. The versions.mak is not used in the version check.
      # Allowing us to build whatever combinations we define in the versions.mak
      - name: Commit and Push
        if: ${{ steps.boot_strap_release.outputs.build_new_release == 'true' && env.bypass_git_commit == false }}
        run: |
          # Only run git commands if there are actual changes
          if [[ -f "versions.json" ]] && [[ -f "versions.mak" ]] && [[ -d "hashes" ]] && [[ -d "patches" ]] && [[ -f "config.sub" ]]; then
            git add versions.json versions.mak hashes/*.sha1 patches/* sources/config.sub || true
            git status --porcelain | grep -q . && {
            git -c user.name='github-actions[bot]' -c user.email='github-actions[bot]@users.noreply.github.com' commit -m "Automated commit by GitHub Actions"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
            } || printf '%s\n' "No changes detected"
          fi
